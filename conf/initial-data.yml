#Users
users:
  - &user !!models.User
    active: true
    email: myildiz83@gmail.com
    emailValidated: true
    firstName: null
    id: 1
    lastLogin: 2014-12-29T07:08:49.850Z
    lastName: null
    linkedAccounts:
    - id: 1
      providerKey: password
      providerUserId: $2a$10$QoJy1UgFXMjLMJlQ6hAnhe1Y07yoBH0Eucna1OSag2qKWhS79HQg6
      user: *user
    name: Muhammet YILDIZ
    permissions: []
    roles:
    - {id: 1, roleName: observer}
    - {id: 2, roleName: Test Designer}
    - {id: 3, roleName: Test Developer}
    testGroups: []
  - &user2 !!models.User
    active: true
    email: cetinkayamelis@gmail.com
    emailValidated: true
    firstName: null
    id: 2
    lastLogin: 2014-12-29T07:08:49.850Z
    lastName: null
    linkedAccounts:
    - id: 2
      providerKey: password
      providerUserId: $2a$10$QoJy1UgFXMjLMJlQ6hAnhe1Y07yoBH0Eucna1OSag2qKWhS79HQg6
      user: *user
    name: Melis Demir
    permissions: []
    roles:
    - {id: 1, roleName: observer}
    - {id: 2, roleName: Test Designer}
    - {id: 3, roleName: Test Developer}
    testGroups: []

#Groups
groups:
- &as4 !!models.TestGroup
    description: null
    name: AS4 Tests
    shortDescription: All test cases related to AS4
    owner: *user
    testAssertions:
    - &taas41 !!models.TestAssertion
        testGroup: *as4
        taId: TAAS41
        normativeSource: src1
        target: as4 message
        prerequisites: be cool
        predicate: as4 message is terribly valid
        testCases:
        - &as4case1 !!models.TestCase
            parameters: ''
            shortDescription: A test case to check the eb code party id
            tdl: sampletdl/as42.tdl
            testAssertion: *taas41
            name: AS41
        - &as4case2 !!models.TestCase
            description: null
            parameters: ''
            shortDescription: A test case to check the hede hodo
            tdl: sampletdl/as42.tdl
            testAssertion: *taas41
            name: AS42
- &smp !!models.TestGroup
    description: null
    name: SMP Tests
    shortDescription: All test cases related to SMP
    owner: *user
    testAssertions:
    - &tasmp1 !!models.TestAssertion
        testGroup: *smp
        taId: TASMP1
        normativeSource: src2
        target: smp message
        prerequisites: be cool
        predicate: smp message is terribly valid
        testCases:
        - !!models.TestCase
            description: null
            parameters: ''
            shortDescription: Check for the public key of BDX
            tdl: sampletdl/SMP1.tdl
            testAssertion: *tasmp1
            name: SMP1
- &bdxl !!models.TestGroup
    description: null
    name: BDXL Tests
    shortDescription: All test cases related to BDXL
    owner: *user
    testAssertions:
    - &tabdxl1 !!models.TestAssertion
        testGroup: *smp
        taId: TABDXL1
        normativeSource: src2
        target: smp message
        prerequisites: be cool
        predicate: smp message is terribly valid
        testCases:
        testCases:
        - !!models.TestCase
            description: null
            parameters: ''
            shortDescription: Check for the BDXL id,address match
            tdl: sampletdl/BDXL1.tdl
            testAssertion: *tabdxl1
            name: BDXL1
#TestRun
testruns:
  - &testrun1 !!models.TestRun
    testCase: *as4Case1
    runner: *user
    id: 1
    wrappers: [*xmlgenerator]
wrappers:
- &xmlgenerator !!models.Wrapper
  name: XML Generator Wrapper
  id: 1
  user: *user
  signals:
  - &xmlProduced !!models.TSignal
      wrapper: *xmlgenerator
      signature: public abstract void xmlProduced(byte[] generatedXML)
  - &xmlProduced2 !!models.TSignal
      wrapper: *xmlgenerator
      signature: public abstract void xmlProduced2(byte[] generatedXML)
  slots:
  - &generateXML !!models.TSlot
      wrapper: *xmlgenerator
      signature: public void generateXML(byte[] inputBooks)
  - &generateXML2 !!models.TSlot
      wrapper: *xmlgenerator
      signature: public void generateXML2(byte[] inputBooks)
- &testWrapper0 !!models.Wrapper
  name: testWrapper0
	user: *user
	signals:
	- !!models.TSignal
	  wrapper: *testWrapper0
	  signature: signal0()
	slots:
	- !!models.TSlot
	  wrapper: *testWrapper0
	  signature: slot0()
- &testWrapper1 !!models.Wrapper
  name: testWrapper1
	user: *user
	signals:
	- !!models.TSignal
	  wrapper: *testWrapper1
	  signature: signal1(int, int, java.lang.String)
	slots:
	- !!models.TSlot
	  wrapper: *testWrapper1
	  signature: slot0()
- &testWrapper2 !!models.Wrapper
  name: testWrapper2
	user: *user
	signals:
	- !!models.TSignal
	  wrapper: *testWrapper2
	  signature: signal1(int, int, java.lang.String)a
	slots:
	- !!models.TSlot
	  wrapper: *testWrapper2
	  signature: slot1(int, int, java.lang.String)
- &testWrapper3 !!models.Wrapper
  name: testWrapper3
	user: *user
	signals:
	- !!models.TSignal
	  wrapper: *testWrapper3
	  signature: signal2(byte[], byte[], java.lang.String)
	slots:
	- !!models.TSlot
	  wrapper: *testWrapper3
	  signature: slot1(int, int, java.lang.String)
- &testWrapper3 !!models.Wrapper
  name: testWrapper4
	user: *user
	signals: []
	slots:
	- !!models.TSlot
	  wrapper: *testWrapper4
	  signature: slot2(int, int, java.lang.String, byte [], byte [], java.util.Date)

#Run configurations &as4case1
runConfigurations:
- !!models.RunConfiguration
  name: TAAS41(1);
  testCase: *as4case1
  isObsolete = false
	wrappers:
